// Autogenerated file.  Do not edit.
// See sdf-types/

export type GenericSdfProperties = {
  privateData?: { [key: string]: any };
  comment?: string | Array<string>;
};

export type HasWdNode = {
  wd_node: WdNode | Array<WdNode>;
  wd_label: string | Array<string>;
  wd_description: string | Array<string>;
};

export type HasWdNodeOptional = {
  wd_node?: WdNode | Array<WdNode>;
  wd_label?: string | Array<string>;
  wd_description?: string | Array<string>;
};

export type DocumentId = string & { readonly __tag: unique symbol };

export type EventPrimitiveId = string & { readonly __tag: unique symbol };

export type InstanceId = string & { readonly __tag: unique symbol };

export type EntityId = string & { readonly __tag: unique symbol };

export type RelationId = string & { readonly __tag: unique symbol };

export type EventId = string & { readonly __tag: unique symbol };

export type ParticipantId = string & { readonly __tag: unique symbol };

export type ValueId = string & { readonly __tag: unique symbol };

export type WdNode = string & { readonly __tag: unique symbol };

export type ProvenanceDatumId = string & { readonly __tag: unique symbol };

export type AnyId =
  | DocumentId
  | EventPrimitiveId
  | InstanceId
  | EntityId
  | RelationId
  | EventId
  | ParticipantId
  | ValueId
  | ProvenanceDatumId;

export type StringOrContextMapping = string | JsonLdContextMapping;

export type JsonLdContextArray =
  | StringOrContextMapping
  | Array<StringOrContextMapping>;
export type JsonLdContextMapping = { [key: string]: any };
export type JsonLdContext = JsonLdContextArray | JsonLdContextMapping;

export type Document = {
  "@id": DocumentId;
  "@context": JsonLdContext;
  events?: Event | Array<Event>;
  ceID?: string;
  entities?: Entity | Array<Entity>;
  instances?: Instance | Array<Instance>;
  provenanceData?: ProvenanceDatum | Array<ProvenanceDatum>;
  relations?: Relation | Array<Relation>;
  sdfVersion: string;
  ta2?: boolean;
  task2?: boolean;
  version: string;
} & GenericSdfProperties;

export type Instance = {
  "@id": InstanceId;
  name: string;
  confidence?: number;
  description?: string;
  entities: Entity | Array<Entity>;
  events: Event | Array<Event>;
  relations?: Relation | Array<Relation>;
  schemaInstantiations?: string | Array<string>;
  ta1ref?: EventId | InstanceId | RelationId;
};

export type EventEntityRelationId = EventId | EntityId | RelationId;

export type EventEntityId = EventId | EntityId;

export type Value = {
  "@id": ValueId;
  confidence?: number | Array<number>;
  modality?: Modality;
  provenance: string | Array<string>;
  ta2entity: EventEntityId;
};

export type Entity = {
  "@id": EntityId;
  aka?: string | Array<string>;
  centrality?: number;
  name: string;
  reference?: string | Array<string>;
  ta2wd_node?: WdNode | Array<WdNode>;
  ta2wd_label?: string | Array<string>;
  ta2wd_description?: string | Array<string>;
  origName?: string;
  confidence?: number | Array<number>;
} & GenericSdfProperties &
  HasWdNodeOptional;

export const ModalityValueValues = [
  "generic",
  "hedged",
  "irrealis",
  "negated",
] as const;
export type ModalityValue = (typeof ModalityValueValues)[number];

export type Modality = ModalityValue | Array<ModalityValue>;
export const AspectValues = [
  "stat",
  "punct",
  "perf",
  "imperf",
  "iter",
  "incept",
  "unspec",
] as const;
export type Aspect = (typeof AspectValues)[number];

export type ProvenanceDatumGeneric = {
  provenanceID: ProvenanceDatumId;
  childID: string;
  sourceURL?: string;
  mediaType: string;
  parentIDs: string | Array<string>;
} & GenericSdfProperties;

export type ProvenanceDatum =
  | ProvenanceDatumText
  | ProvenanceDatumVideo
  | ProvenanceDatumAudio
  | ProvenanceDatumImage;

export type ProvenanceDatumText = {
  length: number;
  offset: number;
} & ProvenanceDatumGeneric;

export type ProvenanceDatumVideo = {
  boundingBox?: number | Array<number>;
  endTime?: number;
  keyframes?: number | Array<number>;
  startTime?: number;
} & ProvenanceDatumGeneric;

export type ProvenanceDatumAudio = {
  endTime: number;
  startTime: number;
} & ProvenanceDatumGeneric;

export type ProvenanceDatumImage = {
  boundingBox: number | Array<number>;
} & ProvenanceDatumGeneric;

export type Relation = {
  "@id": RelationId;
  ta1ref?: EventEntityRelationId;
  centrality?: number;
  confidence?: number;
  modality?: Modality;
  name?: string;
  reference?: string | Array<string>;
  relationObject: EventEntityId | Array<EventEntityId>;
  relationObject_prov?: string;
  relationProvenance?: string | Array<string>;
  relationSubject: EventEntityId;
  relationSubject_prov?: string;
  origName?: string;
} & GenericSdfProperties &
  HasWdNode;

export const ChildrenGateValues = ["and", "or", "xor"] as const;
export type ChildrenGate = (typeof ChildrenGateValues)[number];

export type Event = {
  "@id": EventId;
  achieves?: string;
  requires?: string;
  aka?: string | Array<string>;
  children?: Child | Array<Child>;
  confidence?: number | Array<number>;
  description?: string;
  goal?: string;
  instanceOf?: EventId;
  maxDuration?: string;
  minDuration?: string;
  modality?: Modality;
  name: string;
  children_gate?: ChildrenGate;
  participants?: Participant | Array<Participant>;
  provenance?: ProvenanceDatumId | Array<ProvenanceDatumId>;
  reference?: string | Array<string>;
  relations?: Relation | Array<Relation>;
  repeatable?: boolean;
  ta1explanation?: string | Array<string>;
  ta1ref?: EventId | InstanceId | RelationId;
  temporal?: TemporalObject | Array<TemporalObject>;
  ta2wd_node?: WdNode | Array<WdNode>;
  ta2wd_label?: string | Array<string>;
  ta2wd_description?: string | Array<string>;
  predictionProvenance?: EventEntityRelationId | Array<EventEntityRelationId>;
  isTopLevel?: boolean;
  origDescription?: string;
  origName?: string;
  parent?: EventId;
  subgroup_events?: EventId | Array<EventId>;
  outlinks?: EventId | Array<EventId>;
} & GenericSdfProperties &
  HasWdNodeOptional;

export type Child = {
  child: EventId;
  importance?: number;
  optional?: boolean;
  repeatable?: boolean;
} & GenericSdfProperties;

export type Participant = {
  "@id": ParticipantId;
  entity: EventEntityId;
  reference?: string | Array<string>;
  roleName: string;
  values?: Value | Array<Value>;
} & GenericSdfProperties &
  HasWdNodeOptional;

export type TemporalObject = {
  absoluteTime?: string;
  confidence?: number;
  duration?: string;
  earliestEndTime?: string;
  earliestStartTime?: string;
  latestStartTime?: string;
  latestEndTime?: string;
  provenance?: ProvenanceDatumId | Array<ProvenanceDatumId>;
} & GenericSdfProperties;

export type EventPrimitive = {
  wd_node: WdNode;
  wd_label: string;
  wd_description: string;
  args: EventArgument | Array<EventArgument>;
  isSubschema: boolean;
};

export type EventArgument = {
  name: string;
  fullName: string;
};
